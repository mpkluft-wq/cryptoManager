<?php

declare(strict_types=1);

namespace App\Shared\Infrastructure\Controller\Calculator;

use App\Shared\Infrastructure\Form\Calculator\CalculateGridType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

/**
 * –°–∫—Ä–∏–ø—Ç —Ä–∞—Å—á—ë—Ç–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∫–∏
 *
 * –¢–ó (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é):
 * üìÑ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°–∫—Ä–∏–ø—Ç —Ä–∞—Å—á—ë—Ç–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∫–∏
 * üß≠ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ
 * –°–∫—Ä–∏–ø—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–Ω–∏ –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ –∞–∫—Ç–∏–≤–∞ –ø–æ —Å–µ—Ç–∫–µ, —á—Ç–æ–±—ã –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ –¥–æ—Å—Ç–∏—á—å –∑–∞–¥–∞–Ω–Ω–æ–π —Ü–µ–ª–∏ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, x3 –æ—Ç –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞. –ü–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –ø—Ä–∏ –ø—Ä–æ—Å–∞–¥–∫–µ, –ø—Ä–æ–¥–∞–∂–∏ ‚Äî –ø—Ä–∏ —Ä–æ—Å—Ç–µ. –û–±—ä—ë–º—ã –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–¥–∞—é—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.
 *
 * üì• –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * –ü–∞—Ä–∞–º–µ—Ç—Ä	–û–ø–∏—Å–∞–Ω–∏–µ
 * average_price	–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∞–∫—Ç–∏–≤–∞
 * initial_capital	–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª (–≤ –≤–∞–ª—é—Ç–µ)
 * target_multiplier	–¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 –¥–ª—è x3)
 * drop_step_percent	–®–∞–≥ –ø—Ä–æ—Å–∞–¥–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5%)
 * buy_percent	–ü—Ä–æ—Ü–µ–Ω—Ç –∫–∞–ø–∏—Ç–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –Ω–∞ –∫–∞–∂–¥—É—é –¥–æ–∫—É–ø–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10%)
 * rise_step_percent	–®–∞–≥ —Ä–æ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10%)
 * precision	–¢–æ—á–Ω–æ—Å—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —Ü–µ–Ω –∏ –æ–±—ä—ë–º–æ–≤ ‚Äî –¥–æ 4 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
 * –¢–∞–∫–∂–µ: total_asset_amount ‚Äî –æ–±—â–∏–π –æ–±—ä—ë–º –∞–∫—Ç–∏–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂ (—É—Ç–æ—á–Ω–µ–Ω–∏–µ –∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π).
 *
 * üì§ –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * –ú–∞—Å—Å–∏–≤ —É—Ä–æ–≤–Ω–µ–π –ø–æ–∫—É–ø–∫–∏ (price, amount, capital_used)
 * –ú–∞—Å—Å–∏–≤ —É—Ä–æ–≤–Ω–µ–π –ø—Ä–æ–¥–∞–∂–∏ (price, amount, expected_profit)
 * –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: –æ–±—â–∞—è —Å—É–º–º–∞ –∫–∞–ø–∏—Ç–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞ –ø–æ–∫—É–ø–∫–∏; –æ–±—â–∏–π –æ–±—ä—ë–º –∞–∫—Ç–∏–≤–∞, –ø—Ä–æ–¥–∞–Ω–Ω—ã–π –ø–æ —Å–µ—Ç–∫–µ; –æ–±—â–∞—è –ø—Ä–∏–±—ã–ª—å –ø–æ —Ñ–∞–∫—Ç—É –ø—Ä–æ–¥–∞–∂–∏.
 *
 * üßÆ –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
 * –ü–æ–∫—É–ø–∫–∞: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∏–∂–µ average_price, –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å = average_price * (1 - drop_step_percent/100). –ù–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ —Ç—Ä–∞—Ç–∏—Ç—Å—è buy_percent –æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –∫–∞–ø–∏—Ç–∞–ª–∞. –û—Å—Ç–∞–Ω–æ–≤ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ max_drawdown_percent.
 * –ü—Ä–æ–¥–∞–∂–∞: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤—ã—à–µ average_price, –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å = average_price * (1 + rise_step_percent/100). –ù–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ –ø—Ä–æ–¥–∞—ë—Ç—Å—è –¥–æ–ª—è –æ—Ç –æ–±—â–µ–≥–æ –æ–±—ä—ë–º–∞, —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: —Å—Ç–∞—Ä—Ç 1% –∏ –¥–∞–ª—å–Ω–µ–π—à–∏–π —Ä–æ—Å—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏ —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º (1 + rise_step_percent/100). –ü—Ä–æ–¥–∞–∂–∏ –≤–µ–¥—É—Ç—Å—è –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –≤—ã—Ä—É—á–∫–∏ (average_price * total_asset_amount * target_multiplier).
 * –ü—Ä–∏–±—ã–ª—å: —Å—É–º–º–∞ –≤—ã—Ä—É—á–∫–∏ –º–∏–Ω—É—Å –∫–∞–ø–∏—Ç–∞–ª, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–π –Ω–∞ –ø–æ–∫—É–ø–∫–∏. –ö–æ–º–∏—Å—Å–∏–∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è. –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –ø–æ precision.
 */
final class CalculateGridController extends AbstractController
{
    public function __invoke(Request $request): Response
    {
        $form = $this->createForm(CalculateGridType::class);
        $form->handleRequest($request);

        $result = null;
        if ($form->isSubmitted() && $form->isValid()) {
            $data = $form->getData();
            $result = $this->calculate($data);
        }

        return $this->render('/calculator/calculate_grid.html.twig', [
            'form' => $form->createView(),
            'result' => $result,
        ]);
    }

    /**
     * @param array<string, mixed> $data
     * @return array<string, mixed>
     */
    private function calculate(array $data): array
    {
        $avg = (float) $data['average_price'];
        $targetMult = (int) $data['target_multiplier'];
        $riseStep = (float) $data['rise_step_percent'];
        $precision = (int) $data['precision'];
        $totalAsset = (float) $data['total_asset_amount'];

        $sellLevels = [];

        // –¶–µ–ª—å –ø–æ –≤—ã—Ä—É—á–∫–µ: –æ—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ–≥–æ –æ–±—ä—ë–º–∞ –ø–æ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ * –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä
        $targetRevenue = $avg * $totalAsset * $targetMult;
        $accRevenue = 0.0;

        // –î–æ–ª—è –ø—Ä–æ–¥–∞–∂ –ø–æ —É—Ä–æ–≤–Ω—è–º —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
        // - —Å—Ç–∞—Ä—Ç—É–µ–º —Å min 1% –æ—Ç –æ–±—â–µ–≥–æ –æ–±—ä—ë–º–∞ –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Ä–æ–≤–Ω–µ
        // - –Ω–∞ –∫–∞–∂–¥–æ–º —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–≤–Ω–µ –¥–æ–ª—è —Ä–∞—Å—Ç—ë—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏ —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º (1 + rise_step/100)
        $percentThisLevel = 1.0; // % –æ—Ç –æ–±—â–µ–≥–æ –æ–±—ä—ë–º–∞ –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Ä–æ–≤–Ω–µ (–º–∏–Ω–∏–º—É–º)
        $growthFactor = 1.0 + ($riseStep / 100.0);

        $sellLevelIndex = 1;
        $sellPrice = $avg * (1 + $riseStep / 100.0);
        $totalSold = 0.0;
        $remainingAsset = $totalAsset;

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        $maxLevels = 1000;
        $iterations = 0;

        while ($accRevenue < $targetRevenue && $iterations < $maxLevels && $remainingAsset > 0) {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä—ë–º –∫ –ø—Ä–æ–¥–∞–∂–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∏–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ (–æ—Ç –æ–±—â–µ–≥–æ), –Ω–æ –Ω–µ –±–æ–ª—å—à–µ –æ—Å—Ç–∞—Ç–∫–∞
            $amountPlanned = $totalAsset * ($percentThisLevel / 100.0);
            $amountToSell = min($amountPlanned, $remainingAsset);
            if ($amountToSell <= 0) {
                break;
            }

            $revenue = $amountToSell * $sellPrice;

            $sellLevels[] = [
                'level' => $sellLevelIndex,
                'price' => $this->r($sellPrice, $precision),
                'percent' => $this->r($percentThisLevel, 2),
                'amount' => $this->r($amountToSell, $precision),
                'expected_profit' => $this->r($revenue, $precision),
            ];

            $accRevenue += $revenue;
            $totalSold += $amountToSell;
            $remainingAsset = $this->r($remainingAsset - $amountToSell, $precision);

            $sellLevelIndex++;
            $sellPrice = $sellPrice * (1 + $riseStep / 100.0);
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏
            $percentThisLevel = max(1.0, $percentThisLevel * $growthFactor);
            $iterations++;
        }

        $accRevenue = $this->r($accRevenue, $precision);
        $totalSold = $this->r($totalSold, $precision);

        return [
            'sell_levels' => $sellLevels,
            'meta' => [
                'total_sold_amount' => $totalSold,
                'target_revenue' => $this->r($targetRevenue, $precision),
                'reached_target' => $accRevenue >= $targetRevenue,
            ],
        ];
    }

    private function r(float $value, int $precision): float
    {
        return round($value, $precision);
    }
}
